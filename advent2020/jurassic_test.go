package advent2020

import (
	"fmt"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestParseImageTiles(t *testing.T) {
	t.Skip()
	given := strings.NewReader(`Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1234:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###`)

	expectedTiles := []Tile{
		{
			ID: 2311,
			Pixels: [][]Pixel{
				{'.', '.', '#', '#', '.', '#', '.', '.', '#', '.'},
				{'#', '#', '.', '.', '#', '.', '.', '.', '.', '.'},
				{'#', '.', '.', '.', '#', '#', '.', '.', '#', '.'},
				{'#', '#', '#', '#', '.', '#', '.', '.', '.', '#'},
				{'#', '#', '.', '#', '#', '.', '#', '#', '#', '.'},
				{'#', '#', '.', '.', '.', '#', '.', '#', '#', '#'},
				{'.', '#', '.', '#', '.', '#', '.', '.', '#', '#'},
				{'.', '.', '#', '.', '.', '.', '.', '#', '.', '.'},
				{'#', '#', '#', '.', '.', '.', '#', '.', '#', '.'},
				{'.', '.', '#', '#', '#', '.', '.', '#', '#', '#'},
			},
		},
		{
			ID: 1234,
			Pixels: [][]Pixel{
				{'.', '.', '#', '#', '.', '#', '.', '.', '#', '.'},
				{'#', '#', '.', '.', '#', '.', '.', '.', '.', '.'},
				{'#', '.', '.', '.', '#', '#', '.', '.', '#', '.'},
				{'#', '#', '#', '#', '.', '#', '.', '.', '.', '#'},
				{'#', '#', '.', '#', '#', '.', '#', '#', '#', '.'},
				{'#', '#', '.', '.', '.', '#', '.', '#', '#', '#'},
				{'.', '#', '.', '#', '.', '#', '.', '.', '#', '#'},
				{'.', '.', '#', '.', '.', '.', '.', '#', '.', '.'},
				{'#', '#', '#', '.', '.', '.', '#', '.', '#', '.'},
				{'.', '.', '#', '#', '#', '.', '.', '#', '#', '#'},
			},
		},
	}

	actualTiles := ParseImageTiles(given)

	assert.Equal(t, expectedTiles, actualTiles)

	for _, tile := range actualTiles {
		edges := tile.Edges()
		fmt.Println("Edges:", edges)

		var flipped []Edge

		for _, edge := range edges {
			flipped = append(flipped, edge.Flip())
		}

		fmt.Println("Edges (Flipped):", flipped)
	}
}

var sampleInput = `Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...`

func TestFindCorners(t *testing.T) {
	given := strings.NewReader(sampleInput)

	givenTileset := ParseImageTiles(given)

	expectedTileIDs := []int{1951, 3079, 2971, 1171}

	actualTileIDs, _ := givenTileset.FindCorners()

	assert.ElementsMatch(t, expectedTileIDs, actualTileIDs)
}

func TestProperlyArrange(t *testing.T) {
	given := strings.NewReader(sampleInput)

	tileset := ParseImageTiles(given)

	tileset.ProperlyArrange()

	var tileIDs []int

	for _, tile := range tileset {
		tileIDs = append(tileIDs, tile.ID)
	}

	expectedTileIDs := []int{2971, 1489, 1171, 2729, 1427, 2473, 1951, 2311, 3079}
	assert.Equal(t, expectedTileIDs, tileIDs)

	fmt.Println()
	fmt.Println()
	fmt.Println(tileset.Print())
	fmt.Println()
	fmt.Println()
}
